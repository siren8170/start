struct MIRO
{
	int** miro;
	int wide;
	int raw;
};

enum ColorType {
	BLACK,  	//0
	darkBLUE,	//1
	DarkGreen,	//2
	darkSkyBlue,//3
	DarkRed,  	//4
	DarkPurple,	//5
	DarkYellow,	//6
	GRAY,		//7
	DarkGray,	//8
	BLUE,		//9
	GREEN,		//10
	SkyBlue,	//11
	RED,		//12
	PURPLE,		//13
	YELLOW,		//14
	WHITE		//15
} COLOR;

enum R {
	up = 'w',
	left = 'a',
	down = 's',
	right = 'd'
} WASD;

#pragma warning(disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <conio.h>
#include <windows.h>

void textcolor(int colorNum) {
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), colorNum);
}
struct MIRO Makemiro(struct MIRO); struct MIRO Insertion(struct MIRO); void Playroad(struct MIRO); struct MIRO Resize(struct MIRO);  void Exit(struct MIRO); int Choise();

int main() {
	int i, j;
	int colorP1 = 0;
	int colorP2 = 0;
	int** miro = (int**)malloc(sizeof(int*) * 5);
	for (int q = 0; q < 5; q++) {
		miro[q] = (int*)malloc(sizeof(int) * 5);
	}

	struct MIRO M = { miro, 5, 5};

	char a;
	const char list[5][9] = { "미로제작", "미로삽입", "게임시작", "크기정의", "종료" };
	const char YN[2][7] = { "예", "아니오" };

	for (i = 0; i < 5; i++) {
		for (j = 0; j < 5; j++)
			miro[i][j] = 1;
	}//미로 배열 생성

	while(1) {
		system("cls");
		printf("어떤 기능을 사용하시겠습니까?");
		for (i = 0; i < 5; i++) {
			if (colorP1 == i) textcolor(SkyBlue);
			printf("\n* ");
			textcolor(WHITE);
			printf("%s", list[i]);
		}

		a = Choise();
		if (a == up) {
			colorP1 = (colorP1 > 0) ? colorP1 - 1 : colorP1;
		}
		else if (a == down) {
			colorP1 = (colorP1 < 4) ? colorP1 + 1 : colorP1;
		}
		else if (a == 0) {

			do{
				system("cls");
				printf("%s를 실행하시겠습니까?\n", list[colorP1]);
				for (i = 0; i < 2; i++) {
					if (colorP2 == i) textcolor(SkyBlue);
					printf(" * ");
					textcolor(WHITE);
					printf("%s", YN[i]);
				}
			
				a = Choise();
				if (a == left) {
					colorP2 = (colorP2 > 0) ? colorP2 - 1 : colorP2;
				}
				else if (a == right) {
					colorP2 = (colorP2 < 1) ? colorP2 + 1 : colorP2;
				}
				else if (a == 0 && colorP2 == 0) {
					switch (colorP1) {
						case 0:
							M = Makemiro(M);
							break;
						case 1:
							M = Insertion(M);
							break;
						case 2:
							Playroad(M);
							break;
						case 3:
							M = Resize(M);
							break;
						case 4:
							Exit(M);
						default:
							break;
					}
				}
			} while (a != 0);
		}
	}
}

struct MIRO Makemiro(struct MIRO M) {
	system("cls");
	int i, j;
	while (1) {
		if (M.wide > 9) {
			for (i = 1; i <= M.wide; i++) {
				if (i % 5 == 0 && i > 9 || i == M.wide)
					printf("%d ", i / 10);
				else
					printf("  ");
			}
		}
		printf("\n");
		for (i = 1; i <= M.wide; i++) {
			if (i % 5 == 0 || i == M.wide)
				printf("%d ", i % 10);
			else
				printf("  ");
		}
		printf("\n\n"); // 가이드 라인 생성
	
		for (j = 0; j < M.raw; j++) {
			if ((j + 1) % 5 == 0 || (j + 1) == M.raw) {
				for (i = 1; i <= M.wide; i++) {
					printf("  ");
				}
				printf("%d\r", j + 1);
			}
			for (i = 0; i < M.wide; i++)
				printf("%d ", M.miro[i][j]);
			printf("\n");
		}//미로 출력

		char derection;
		int ch, x, y, height;
		printf("\n계속하시겠습니까?(y/n) > ");
		scanf(" %c", &derection);
		if (derection == 'n') {
			printf("\n\n저장되었습니다\n\n");
			
			return M;
			//만약 문자열(END)일 경우 미로 출력 후 종료
		}
		printf("\n 입력할 종류를 입력해주세요\n * 길(0)\n * 벽(1)\n * 출발지점(2)\n * 도착지점(3)\n > ");
		scanf(" %d", &ch);

		printf("\n 좌표를 입력해주세요(x, y) > ");
		scanf(" (%d, %d)", &x, &y);

		if (ch < 2) {
			printf("\n 방향을 입력해주세요(WASD) > ");
			scanf(" %c", &derection);
			printf("\n 길이를 입력해주세요 > ");
			scanf(" %d", &height);
			if (derection == 'w' || derection == 'W') {
				x--;
				for (i = y - 1; i > y - 1 - height; i--) {
					M.miro[x][i] = ch;
				}
			}
			else if (derection == 'a' || derection == 'A'){
				y--;
				for (i = x - 1; i > x - 1 - height; i--) {
					M.miro[i][y] = ch;
				}
			}
			else if (derection == 's' || derection == 'S') {
				x--;
				for (i = y - 1; i < height + y - 1; i++) {
					M.miro[x][i] = ch;
				}
			}
			else {
				y--;
				for (i = x - 1; i < height + x - 1; i++) {
					M.miro[i][y] = ch;
				}
			}
		}
		else
			M.miro[--x][--y] = ch;
	}
}

struct MIRO Insertion(struct MIRO M) {
	system("cls");
	printf("삽입할 미로를 입력해주세요 > ");
	char flag = 1;
	while (flag == 1) {
		for (int j = 0; j < M.raw; j++) {
			for (int i = 0; i < M.wide; i++) {
				scanf_s(" %d", &M.miro[i][j]);
				if (M.miro[i][j] > 10) {
					printf("잘못된 입력입니다. 다시 입력해주세요\n");
				}
				else
				{
					flag = 0;
				}
			}
		}
	}
	return M;
}

void Playroad(struct MIRO M) {
	int x, y, q, w;
	char a;
Q:
	for (int j = 0; j < M.raw; j++) {
		for (int i = 0; i < M.wide; i++)
			if (M.miro[i][j] == 2) {
				x = i+1;
				y = j+1;
			}
	}//출발점 탐색

	printf("모드를 선택해주세요\n * 쉬움(e)\n * 보통(n)\n * 어려움(h)\n > ");
	scanf(" %c", &a);
	if (a == 'h') {
		q = 2;
		w = 1;
	}
	else if (a == 'n') {
		q = 3;
		w = 2;
	}
	while (1) {
		system("cls");
		for (int j = y - q; j < y + w; j++) {
			for (int i = x - q; i < x + w; i++) {
				if (x - i == 1 && y - j == 1) {
					textcolor(SkyBlue);
					printf(" 8");
				}
				else if (M.miro[i][j] == 1) {
					textcolor(YELLOW);
					printf(" %d", M.miro[i][j]);
				}
				else if (M.miro[i][j] == 0) {
					textcolor(WHITE);
					printf(" %d", M.miro[i][j]);
				}
				else if (M.miro[i][j] == 2) {
					textcolor(darkSkyBlue);
					printf(" %d", M.miro[i][j]);
				}
				else if (M.miro[i][j] == 3) {
					textcolor(GREEN);
					printf(" %d", M.miro[i][j]);
				}
				else if (M.miro[i][j] == 9) {
					textcolor(WHITE);
					printf(" O");
				}
			}
		printf("\n");
		}
		textcolor(WHITE);
		printf("\n\n * 움직일 방향을 선택하세요 > ");
		a = _getch();

		if (a == 'w' || a == 'W') {
			--y;
		}
		else if (a == 'a' || a == 'A') {
			--x;
		}
		else if (a == 's' || a == 'S') {
			++y;
		}
		else if (a == 'd' || a == 'D') {
			++x;
		}
		else
			printf("\n\n제대로 입력되지 않았습니다");

		if (M.miro[x - 1][y - 1] == 1) {
			if (a == 'w' || a == 'W') {
				++y;
			}
			else if (a == 'a' || a == 'A') {
				++x;
			}
			else if (a == 's' || a == 'S') {
				--y;
			}
			else if (a == 'd' || a == 'D') {
				--x;
			}
		}
		else if (M.miro[x - 1][y - 1] == 3) {
			printf("\n\n축하합니다\n게임을 클리어 하셨습니다!!!\n\n");
			a = _getch();
			return 0;
		}
		else if (M.miro[x - 1][y - 1] == 9) {
			printf("\n\n저런\n\n");
		}
	}
}

struct MIRO Resize(struct MIRO M) {
	system("cls");
	int newwide, newraw;
	printf("미로의 크기를 입력해주세요\n 예) 10*20\n > ");
	scanf_s("%d*%d", &newwide, &newraw);

	if (newwide > M.wide) {
		int** temp = (int**)realloc(M.miro, newwide * sizeof(int*));
		M.miro = temp;

		// 2. 새 행(row) 할당 + 초기화
		for (int i = M.wide; i < newwide; i++) {
			M.miro[i] = (int*)malloc(newraw * sizeof(int));
			// 새 행 전체 초기화
			for (int j = 0; j < newraw; j++) {
				M.miro[i][j] = 1;
			}
		}
    }

	if (newraw > M.raw) {
		// 3. 기존 행의 열(column) 확장 + 새 열 초기화
		for (int i = 0; i < M.wide; i++) {
			int* tempRow = (int*)realloc(M.miro[i], newraw * sizeof(int));
			M.miro[i] = tempRow;

			// 새로 추가된 열만 초기화
			for (int j = M.raw; j < newraw; j++) {
				M.miro[i][j] = 1;
			}
		}
	}

	M.raw = newraw;
	M.wide = newwide;

	printf("재할당이 완료되었습니다\n.");
	return M;
}

void Exit(struct MIRO M) {
	system("cls");
	printf("\n\n");
	for (int j = 0; j < M.raw; j++) {
		for (int i = 0; i < M.wide; i++)
			printf("%d ", M.miro[i][j]);
		printf("\n");
	}//미로 출력

	for (int i = 0; i < M.wide; i++)
	{
		free(M.miro[i]);
	}
	free(M.miro);
	printf("\n\n미로가 완성되었습니다. 저장해주세요.\n");
	exit(0);
}

int Choise() {
	while (1) {
		int s = _getch();
		switch (s) {
			case up:
				return up;

			case down:
				return down;
	
			case '\r':
				return 0;
	
			case left:
				return left;

			case right:
				return right;

			default:
				break;
		}
	}
}
